{"version":3,"sources":["trivia.png","services/data.js","services/requests.js","redux/reducers/user.js","redux/actions/index.js","redux/reducers/index.js","redux/store/index.js","components/Input.jsx","components/Button.jsx","components/Footer.jsx","pages/Login.js","components/Loading.jsx","components/Img.jsx","components/Header.jsx","pages/Game.js","pages/Config.js","pages/Feedback.js","pages/Ranking.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","NUMBER","getToken","a","async","fetch","response","data","json","getQuestions","userToken","localStorage","getItem","question","INITIAL_STATE","token","user","state","action","type","payload","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Input","this","props","id","label","name","value","onChange","className","dataTestId","htmlFor","data-testid","Component","defaultProps","Button","onClick","disabled","Footer","Login","nameInput","emailInput","handleInput","bind","handleClick","target","setState","addToken","setItem","JSON","stringify","player","assertions","score","gravatarEmail","src","logo","alt","height","to","length","connect","dispatch","Loading","React","Img","Header","Game","currentQuestion","questionsList","seconds","classname","userResponse","redirect","setQuestionsInState","handleNextBtn","handleAlternative","resetSeconds","shuffle","createTimer","calculateScore","prevProps","prevState","results","points","parse","UPDATED_PLAYER_DATA","difficulty","setScoreOnStorage","questionInfo","CORRECT_ANSWER","alternative","correct_answer","WRONG_ANSWERS","incorrect_answers","map","index","clearInterval","cronometerInterval","array","answers","sort","Math","random","b","isShuffled","setInterval","getAttribute","userHash","md5","toString","treatedAnswers","treatAnswersData","category","decode","key","renderTimer","Config","Feedback","picture","ranking","updatedRanking","imgLink","updateRanking","messages","feedbackMessage","Ranking","sortedRanking","Boolean","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d7e33e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const NUMBER = 3;\n\nmodule.exports = { NUMBER };\n","export const getToken = async () => {\n  const TOKEN = 'https://opentdb.com/api_token.php?command=request';\n  const response = await fetch(TOKEN);\n  const data = response.json();\n  return data;\n};\n\nconst getQuestions = async () => {\n  const userToken = localStorage.getItem('token');\n  const question = `https://opentdb.com/api.php?amount=5&token=${userToken}`;\n  const response = await fetch(question);\n  const data = await response.json();\n  return data;\n};\n\nexport default getQuestions;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { SET_TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SET_TOKEN:\n    return {\n      ...state,\n      token: action.payload.token,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import { getToken } from '../../services/requests';\n\nexport const SET_TOKEN = 'SET_TOKEN';\n\nexport function emailAction(newEmail) {\n  return {\n    type: 'NEW_EMAIL',\n    newEmail,\n  };\n}\n\nexport function setTokenAction(payload) {\n  return {\n    type: SET_TOKEN,\n    payload,\n  };\n}\n\nexport function setToken() {\n  return async (dispatch) => {\n    const token = await getToken();\n    dispatch(setTokenAction(token));\n    localStorage.setItem('token', token.token);\n  };\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\n\nconst rootReducer = combineReducers({\n  user,\n  // assertions,\n  // score,\n  // gravatarEmail,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const {\n      id,\n      label,\n      type,\n      name,\n      value,\n      onChange,\n      className,\n      dataTestId,\n    } = this.props;\n\n    return (\n      <label htmlFor={ id }>\n        <h5>{ label }</h5>\n        <input\n          type={ type }\n          name={ name }\n          value={ value }\n          id={ id }\n          onChange={ onChange }\n          className={ className }\n          data-testid={ dataTestId }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n  dataTestId: PropTypes.string.isRequired,\n};\n\nInput.defaultProps = {\n  type: 'text',\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    const {\n      value,\n      className,\n      onClick,\n      dataTestId,\n      disabled,\n    } = this.props;\n    return (\n      <button\n        type=\"button\"\n        className={ className }\n        onClick={ onClick }\n        disabled={ disabled }\n        data-testid={ dataTestId }\n      >\n        { value }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  dataTestId: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  disabled: false,\n  className: '',\n};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport '../css/Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <p>\n          © 2021 Copyright - Todos os direitos reservados\n          <br />\n          Grupo 16 - Turma 14 Tribo A - Trybe\n          Amanda Zotelli, Dandara Dias, Flávio Pires, Maurício Leite e Riquelme Bandeira\n        </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport logo from '../trivia.png';\nimport '../css/Login.css';\nimport { setToken } from '../redux/actions';\nimport Footer from '../components/Footer';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nameInput: '',\n      emailInput: '',\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleInput({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick() {\n    const { nameInput, emailInput } = this.state;\n    const { addToken } = this.props;\n    addToken();\n    localStorage.setItem(\n      'state',\n      JSON.stringify({ player: {\n        name: nameInput,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: emailInput,\n      } }),\n    );\n  }\n\n  render() {\n    const { handleInput, handleClick } = this;\n    const { nameInput, emailInput } = this.state;\n\n    return (\n      <div className=\"login__container\">\n        <div className=\"login\">\n          <img src={ logo } className=\"logo\" alt=\"Logo\" height=\"80px\" />\n          <Input\n            dataTestId=\"input-player-name\"\n            id=\"name\"\n            name=\"nameInput\"\n            label=\"Nome\"\n            onChange={ handleInput }\n          />\n          <Input\n            dataTestId=\"input-gravatar-email\"\n            id=\"email\"\n            name=\"emailInput\"\n            label=\"Email\"\n            onChange={ handleInput }\n            type=\"email\"\n          />\n          <Link to=\"/game\">\n            <Button\n              dataTestId=\"btn-play\"\n              disabled={ nameInput.length === 0 || emailInput.length === 0 }\n              onClick={ handleClick }\n              value=\"Jogar\"\n            />\n          </Link>\n\n          <Link to=\"/config\">\n            <Button\n              dataTestId=\"btn-settings\"\n              value=\"Configurações\"\n            />\n          </Link>\n\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  addToken: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addToken: (payload) => dispatch(setToken(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport '../css/Loading.css';\nimport Footer from './Footer';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"loading\">Loading...</div>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Img extends Component {\n  render() {\n    const { src, alt, dataTestId } = this.props;\n\n    return (\n      <img src={ src } alt={ alt } data-testid={ dataTestId } />\n    );\n  }\n}\n\nImg.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  dataTestId: PropTypes.string,\n};\n\nImg.defaultProps = {\n  dataTestId: '',\n};\n\nexport default Img;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Img from './Img';\nimport logo from '../trivia.png';\nimport '../css/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { player, score, src } = this.props;\n    return (\n      <header>\n        <div className=\"header__container\">\n\n          <div className=\"header__left\">\n            <Link to=\"/\">\n              <Img src={ logo } alt=\"Logo\" />\n            </Link>\n            <span>\n              Score:\n              {' '}\n            </span>\n            <span data-testid=\"header-score\">\n              {score}\n            </span>\n          </div>\n\n          <div className=\"header__right\">\n            <span data-testid=\"header-player-name\">\n              Jogador:\n              {' '}\n              {player}\n            </span>\n\n            <Img dataTestId=\"header-profile-picture\" src={ src } alt=\"Avatar\" />\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  player: PropTypes.string.isRequired,\n  score: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { decode } from 'html-entities';\nimport md5 from 'crypto-js/md5';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport getQuestions from '../services/requests';\nimport '../css/Game.css';\nimport Footer from '../components/Footer';\n\nconst correctAnswer = 'correct-answer';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentQuestion: 0,\n      questionsList: [],\n      seconds: 30,\n      disabled: false,\n      classname: '',\n      userResponse: false,\n      redirect: false,\n    };\n    this.setQuestionsInState = this.setQuestionsInState.bind(this);\n    this.handleNextBtn = this.handleNextBtn.bind(this);\n    this.handleAlternative = this.handleAlternative.bind(this);\n    this.resetSeconds = this.resetSeconds.bind(this);\n    this.shuffle = this.shuffle.bind(this);\n    this.createTimer = this.createTimer.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.createTimer();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentQuestion } = this.state;\n    const MIN_SECONDS = 1;\n    if (prevState.seconds === MIN_SECONDS) {\n      this.resetSeconds();\n    }\n    if (prevState.currentQuestion !== currentQuestion) {\n      this.createTimer();\n    }\n  }\n\n  async setQuestionsInState() {\n    const { results } = await getQuestions();\n    this.setState({\n      questionsList: results,\n    });\n  }\n\n  setScoreOnStorage(points) {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const UPDATED_PLAYER_DATA = {\n      player: {\n        ...player, assertions: player.assertions + 1, score: player.score + points,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(UPDATED_PLAYER_DATA));\n  }\n\n  calculateScore() {\n    const { currentQuestion, questionsList, seconds } = this.state;\n    const BASE_NUMBER = 10;\n    const MAX_DIFFICULTY_VALUE = 3;\n    const question = questionsList[currentQuestion];\n    let difficulty;\n    switch (question.difficulty) {\n    case 'easy':\n      difficulty = 1;\n      break;\n    case 'medium':\n      difficulty = 2;\n      break;\n    case 'hard':\n      difficulty = MAX_DIFFICULTY_VALUE;\n      break;\n    default:\n      return null;\n    }\n    this.setScoreOnStorage(BASE_NUMBER + (seconds * difficulty));\n  }\n\n  treatAnswersData(questionInfo) {\n    const CORRECT_ANSWER = {\n      value: correctAnswer, alternative: questionInfo.correct_answer,\n    };\n    const WRONG_ANSWERS = questionInfo.incorrect_answers.map((alternative, index) => ({\n      value: `wrong-answer-${index}`,\n      alternative,\n    }));\n    const ALL_ANSWERS = [{ ...CORRECT_ANSWER }, ...WRONG_ANSWERS];\n    return ALL_ANSWERS;\n  }\n\n  resetSeconds() {\n    this.setState({\n      seconds: 0,\n      disabled: true,\n      userResponse: true,\n    });\n    clearInterval(this.cronometerInterval);\n  }\n\n  shuffle(array) {\n    const answers = array.map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value);\n    this.setState({\n      isShuffled: true,\n      answers,\n    });\n  }\n\n  createTimer() {\n    const ONE_SECOND = 1000;\n    this.cronometerInterval = setInterval(() => {\n      this.setState((prevState) => ({ seconds: prevState.seconds - 1 }));\n    }, ONE_SECOND);\n  }\n\n  handleNextBtn() {\n    const { currentQuestion } = this.state;\n    const MAX_CLICKS = 4;\n\n    if (currentQuestion < MAX_CLICKS) {\n      this.setState((prevState) => ({\n        currentQuestion: prevState.currentQuestion + 1,\n        classname: '',\n        userResponse: false,\n        seconds: 30,\n        disabled: false,\n        isShuffled: false,\n      }));\n    } else if (currentQuestion === MAX_CLICKS) {\n      this.setState({ redirect: true });\n    }\n  }\n\n  handleAlternative({ target }) {\n    const BUTTON_ID = target.getAttribute('data-testid');\n\n    if (BUTTON_ID === 'correct-answer') {\n      this.calculateScore();\n    }\n\n    this.setState({\n      classname: 'answers-reveal',\n      userResponse: true,\n      disabled: true,\n    });\n\n    clearInterval(this.cronometerInterval);\n  }\n\n  renderTimer() {\n    const { seconds } = this.state;\n    return (\n      <p>\n        { `Tempo restante: ${seconds}` }\n      </p>\n    );\n  }\n\n  render() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const userHash = md5(player.gravatarEmail).toString();\n    const { currentQuestion, questionsList, disabled,\n      isShuffled, classname, userResponse, answers, redirect } = this.state;\n    if (questionsList.length < 1) {\n      this.setQuestionsInState();\n      return (<Loading />);\n    }\n    const questionInfo = questionsList[currentQuestion];\n    const treatedAnswers = this.treatAnswersData(questionInfo);\n    if (!isShuffled) { this.shuffle(treatedAnswers); }\n    return (\n      <>\n        { redirect && <Redirect to=\"/feedback\" />}\n        <Header player={ player.name } score={ player.score } src={ `https://www.gravatar.com/avatar/${userHash}` } />\n        <main className=\"game__container\">\n          <div className={ classname }>\n            <div className=\"game__headings\">\n              <h4 data-testid=\"question-category\">{questionInfo.category}</h4>\n              <p data-testid=\"question-text\">{decode(questionInfo.question)}</p>\n            </div>\n            <div className=\"game__alternatives\">\n              { answers\n              && (answers.map(({ value, alternative }, index) => (\n                <Button\n                  key={ index }\n                  dataTestId={ value }\n                  onClick={ this.handleAlternative }\n                  disabled={ disabled }\n                  value={ alternative }\n                />\n              ))) }\n            </div>\n            <div className=\"game__options\">\n              { this.renderTimer() }\n              { userResponse && <Button\n                dataTestId=\"btn-next\"\n                value=\"Next Question\"\n                className=\"next-question-btn\"\n                onClick={ this.handleNextBtn }\n              /> }\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\n\nexport default class Config extends Component {\n  render() {\n    return (\n      <h2 data-testid=\"settings-title\">Configurações</h2>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { Link } from 'react-router-dom';\nimport { NUMBER } from '../services/data';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport '../css/Feedback.css';\nimport Footer from '../components/Footer';\n\nclass Feedback extends Component {\n  updateRanking({ name, score }, picture) {\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    const updatedRanking = [\n      ...ranking,\n      {\n        name,\n        score,\n        picture,\n      },\n    ];\n    localStorage.setItem('ranking', JSON.stringify(updatedRanking));\n  }\n\n  feedbackMessage() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const { score, assertions } = player;\n\n    return (\n      <p>\n        Você acertou\n        {' '}\n        <span data-testid=\"feedback-total-question\">{assertions}</span>\n        {' '}\n        questões.\n        Um total de\n        {' '}\n        <span data-testid=\"feedback-total-score\">{score}</span>\n        {' '}\n        pontos.\n      </p>\n    );\n  }\n\n  render() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const userHash = md5(player.gravatarEmail).toString();\n    const imgLink = `https://www.gravatar.com/avatar/${userHash}`;\n    const { score, assertions } = player;\n    this.updateRanking(player, imgLink);\n\n    const messages = {\n      question: `Você acertou ${assertions} questões`,\n      score: `Um total de ${score} pontos`,\n      loss: 'Podia ser melhor...',\n      great: 'Mandou bem!',\n    };\n\n    return (\n      <>\n        <Header player={ player.name } score={ score } src={ imgLink } />\n        <main className=\"feedback__container\">\n          <section>\n            <h2 data-testid=\"feedback-text\">\n              {assertions < NUMBER ? messages.loss : messages.great}\n            </h2>\n            <div className=\"feedback__text\">{ this.feedbackMessage() }</div>\n\n            <Link to=\"/ranking\">\n              <Button value=\"Ver Ranking\" dataTestId=\"btn-ranking\" />\n            </Link>\n            <Link to=\"/\">\n              <Button\n                value=\"Jogar Novamente\"\n                className=\"btn-play-again\"\n                dataTestId=\"btn-play-again\"\n              />\n            </Link>\n          </section>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default Feedback;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Img from '../components/Img';\nimport Button from '../components/Button';\nimport Footer from '../components/Footer';\nimport logo from '../trivia.png';\nimport '../css/Ranking.css';\n\nexport default class Ranking extends Component {\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const sortedRanking = ranking.sort((a, b) => b.score - a.score);\n    return (\n      <>\n        <main className=\"ranking__container\">\n          <div className=\"ranking\">\n            <img src={ logo } className=\"logo\" alt=\"Logo\" height=\"80px\" />\n            <h2 data-testid=\"ranking-title\">Ranking</h2>\n            <div>\n              { sortedRanking.map(({ name, score, picture }, index) => (\n                <div className=\"ranking__item\" key={ index }>\n                  <Img src={ picture } alt=\"Avatar\" />\n                  <p data-testid=\"player-name\">{ name }</p>\n                  <p data-testid=\"player-score\">{ score }</p>\n                </div>\n              )) }\n            </div>\n            <Link to=\"/\">\n              <Button value=\"Início\" dataTestId=\"btn-go-home\" />\n            </Link>\n          </div>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Config from './pages/Config';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/config\" component={ Config } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}